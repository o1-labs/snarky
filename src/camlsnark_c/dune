(data_only_dirs libsnark-caml)

;; This library only packages the upstream libre2 library. We put in a
;; separate library rather than putting in re2 directly to avoid
;; having to merge the .a and .so for libre2 and for the stubs of re2,
;; which is hard to do in a portable way

(executable
 (name camlsnark_linker_flags_gen)
 (modules camlsnark_linker_flags_gen)
 (libraries dune.configurator))

(rule
 (targets flags.sexp)
 (action
  (run ./camlsnark_linker_flags_gen.exe)))

(library
 (name camlsnark_c)
 (libraries core ctypes ctypes.foreign)
 (no_dynlink)
 (modes native)
 (modules :standard \ camlsnark_linker_flags_gen)
 (public_name snarky.c)
 (preprocess no_preprocessing)
 (flags :standard -short-paths -safe-string)
 (c_library_flags
  :standard
  (:include flags.sexp))
 (self_build_stubs_archive (camlsnark_c)))

(rule
 (targets libcamlsnark_c_stubs.a)
 (deps
  (source_tree libsnark-caml))
 (action
  (bash
    "\n  if [ $(uname) = 'Linux' ]; then\n    pushd libsnark-caml\n    mkdir -p build\n    pushd build\n      cmake -DMULTICORE=ON -DUSE_PT_COMPRESSION=OFF ..\n      make -j$(nproc)\n  \n      mkdir _stubs_build\n  \n      mkdir _stubs_build/libff\n      pushd _stubs_build/libff/; ar -xv ../../depends/libff/libff/libff.a; popd\n  \n      mkdir _stubs_build/libzm\n      pushd _stubs_build/libzm/; ar -xv ../../depends/libzm.a; popd\n  \n      mkdir _stubs_build/libsnark\n      pushd _stubs_build/libsnark/; ar -xv ../../libsnark/libsnark.a; popd\n  \n      ar -rc libcamlsnark_c_stubs.a _stubs_build/libff/*.o _stubs_build/libzm/*.o _stubs_build/libsnark/*.o\n    popd\n    popd\n    mv libsnark-caml/build/libcamlsnark_c_stubs.a .\nelif [ $(uname) = 'Darwin' ]; then\n  pushd libsnark-caml\n    mkdir -p build\n    pushd build\n      BOOST_ROOT=/usr/local/Cellar/boost/1.68.0_1 BOOST_INCLUDEDIR=/usr/local/Cellar/boost/1.68.0_1/include CPPFLAGS='-I/usr/local/opt/openssl/include -I/usr/local/opt/boost/include -I/usr/local/opt/gmp/include -I/usr/local/include -L/usr/local/lib -I/usr/local/include/gmp.h' CFLAGS='-I/usr/local/include' CXXFLAGS='-I/usr/local/include' LDFLAGS='-L/usr/local/opt/openssl/lib -L/usr/local/opt/boost/lib -L/usr/local/opt/gmp/lib' PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig cmake -DMULTICORE=OFF -DUSE_PT_COMPRESSION=OFF -DWITH_SUPERCOP=OFF -DWITH_PROCPS=OFF -DCMAKE_LIBRARY_PATH=/usr/local/opt/gmp/lib -DCMAKE_RULE_MESSAGES:BOOL=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..\n      make -j$(sysctl -n hw.ncpu)\n  \n      mkdir _stubs_build\n  \n      mkdir _stubs_build/libff\n      pushd _stubs_build/libff/; ar -xv ../../depends/libff/libff/libff.a; popd\n  \n      mkdir _stubs_build/libzm\n      pushd _stubs_build/libzm/; ar -xv ../../depends/libzm.a; popd\n  \n      mkdir _stubs_build/libsnark\n      pushd _stubs_build/libsnark/; ar -xv ../../libsnark/libsnark.a; popd\n  \n      libtool -static -o libcamlsnark_c_stubs.a _stubs_build/libff/*.o _stubs_build/libzm/*.o _stubs_build/libsnark/*.o\n    popd\n  popd\n  mv libsnark-caml/build/libcamlsnark_c_stubs.a .\n    \nelse\n    echo I do not know how to build libsnark on $(uname)\n    exit 1\nfi\n")))
