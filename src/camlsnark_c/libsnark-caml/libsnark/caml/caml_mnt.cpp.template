extern "C" {
using namespace libsnark;
// Fqe
libff::Fqe<ppT>* CURVE_PREFIX(fqe_sqrt)(libff::Fqe<ppT>* x) {
  return new libff::Fqe<ppT>(x->sqrt());
}

libff::Fqe<ppT>* CURVE_PREFIX(fqe_random)() {
  return new libff::Fqe<ppT>(libff::Fqe<ppT>::random_element());
}

libff::Fqe<ppT>* CURVE_PREFIX(fqe_inv)(libff::Fqe<ppT>* x) {
  return new libff::Fqe<ppT>(x->inverse());
}

libff::Fqe<ppT>* CURVE_PREFIX(fqe_square)(libff::Fqe<ppT>* x) {
  return new libff::Fqe<ppT>(x->squared());
}

libff::Fqe<ppT>* CURVE_PREFIX(fqe_add)(libff::Fqe<ppT>* x, libff::Fqe<ppT>* y) {
  return new libff::Fqe<ppT>(*x + *y);
}

libff::Fqe<ppT>* CURVE_PREFIX(fqe_mul)(libff::Fqe<ppT>* x, libff::Fqe<ppT>* y) {
  return new libff::Fqe<ppT>(*x * *y);
}

libff::Fqe<ppT>* CURVE_PREFIX(fqe_sub)(libff::Fqe<ppT>* x, libff::Fqe<ppT>* y) {
  return new libff::Fqe<ppT>(*x - *y);
}

void CURVE_PREFIX(fqe_delete)(libff::Fqe<ppT>* f) {
  delete f;
}

void CURVE_PREFIX(fqe_print)(libff::Fqe<ppT>* f) {
  f->print();
}

std::vector<libff::Fq<ppT>>* CURVE_PREFIX(fqe_to_vector)(libff::Fqe<ppT>* f) {
  return new std::vector<libff::Fq<ppT>>(f->all_base_field_elements());

}
libff::Fqe<ppT>* CURVE_PREFIX(fqe_of_vector)(std::vector<libff::Fq<ppT>>* v) {
  return new libff::Fqe<ppT>(*v);
}

libff::Fqe<ppT>* CURVE_PREFIX(fqe_create_zero)() {
  return new libff::Fqe<ppT>(libff::Fqe<ppT>::zero());
}

}
