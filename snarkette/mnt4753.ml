open Fields
module N = Nat

module Fq =
  Make_fp
    (N)
    (struct
      let order =
        N.of_string
          "41898490967918953402344214791240637128170709919953949071783502921025352812571106773058893763790338921418070971888253786114353726529584385201591605722013126468931404347949840543007986327743462853720628051692141265303114721689601"
    end)

let non_residue = Fq.of_int 13

module Fq2 = struct
  module Params = struct
    let non_residue = non_residue
  end

  include Make_fp2 (Fq) (Params)
end

module Fq4 = struct
  module Params = struct
    let frobenius_coeffs_c1 =
      [| Fq.of_string "1"
       ; Fq.of_string
           "18691656569803771296244054523431852464958959799019013859007259692542121208304602539555350517075508287829753932558576476751900235650227380562700444433662761577027341858128610410779088384480737679672900770810745291515010467307990"
       ; Fq.of_string
           "41898490967918953402344214791240637128170709919953949071783502921025352812571106773058893763790338921418070971888253786114353726529584385201591605722013126468931404347949840543007986327743462853720628051692141265303114721689600"
       ; Fq.of_string
           "23206834398115182106100160267808784663211750120934935212776243228483231604266504233503543246714830633588317039329677309362453490879357004638891167538350364891904062489821230132228897943262725174047727280881395973788104254381611"
      |]

    let non_residue = Fq.(zero, one)
  end

  include Fields.Make_fp2 (Fq2) (Params)
end

module G1 = struct
  module Params = struct
    let a = Fq.of_string "2"

    let b =
      Fq.of_string
        "28798803903456388891410036793299405764940372360099938340752576406393880372126970068421383312482853541572780087363938442377933706865252053507077543420534380486492786626556269083255657125025963825610840222568694137138741554679540"
  end

  include Elliptic_curve.Make (N) (Fq) (Params)

  let one =
    of_affine
      ( Fq.of_string
          "7790163481385331313124631546957228376128961350185262705123068027727518350362064426002432450801002268747950550964579198552865939244360469674540925037890082678099826733417900510086646711680891516503232107232083181010099241949569"
      , Fq.of_string
          "6913648190367314284606685101150155872986263667483624713540251048208073654617802840433842931301128643140890502238233930290161632176167186761333725658542781350626799660920481723757654531036893265359076440986158843531053720994648"
      )
end

module G2 = struct
  module Params = struct
    let a = Fq.(G1.Params.a * non_residue, zero)

    let b = Fq.(zero, G1.Params.b * non_residue)
  end

  include Elliptic_curve.Make (N) (Fq2) (Params)

  let one =
    of_affine
      Fq.
        ( ( of_string
              "29483965110843144675703364744708836524643960105538608078862508397502447349913068434941060515343254862580437318493682762113105361632548148204806052114008731372757389645383891982211245013965175213456066452587869519098351487925167"
          , of_string
              "19706011319630172391076079624799753948158506771222147486237995321925443331396169656568431378974558350664383559981183980668976846806019030432389169137953988990802000581078994008283967768348275973921598166274857631001635633631000"
          )
        , ( of_string
              "39940152670760519653940320314827327941993141403708338666925204282084477074754642625849927569427860786384998614863651207257467076192649385174108085803168743803491780568503369317093191101779534035377266300185099318717465441820654"
          , of_string
              "17608637424964395737041291373756657139607306440193731804102457011726690702169238966996114255971643893157857311132388792357391583164125870757541009035041469463366528798593952884745987697403056488744603829437448927398468360797245"
          ) )
end

module Pairing_info = struct
  let twist = Fq.(zero, one)

  let loop_count =
    N.of_string
      "204691208819330962009469868104636132783269696790011977400223898462431810102935615891307667367766898917669754470400"

  let is_loop_count_neg = true

  let final_exponent =
    N.of_string
      "73552111470802397192299133782080682301728710523587802164414953272757803714910813694725910843025422137965798141904448425397132210312763036419196981551382130855705368355580393262211100095907456271531280742739919708794230272306800896198050256355512255795343046414500439648235407402928016221629661971660368018858492377211675996627011913832155809286572006511506918479348970121218134056996473102963627909657625079190739882316882751992741238799066378820181352081085141743775089602078041985556107852922590029377522580702957164527112688206145822971278968699082020672631957410786162945929223941353438866102009621402205679750863679130426460044792078113778548067020007452390228240608175718400"

  let final_exponent_last_chunk_abs_of_w0 =
    N.of_string
      "204691208819330962009469868104636132783269696790011977400223898462431810102935615891307667367766898917669754470399"

  let final_exponent_last_chunk_is_w0_neg = true

  let final_exponent_last_chunk_w1 = N.of_string "1"
end
