load("@bazel_skylib//rules:common_settings.bzl", "bool_flag", "int_flag", "string_flag")
load("@bazel_skylib//lib:selects.bzl", "selects")

bool_flag( name = "always-link", build_setting_default = False )
config_setting( name = "enable_always_link", flag_values = { ":always-link": "True" })
config_setting( name = "disable_always_link", flag_values = { ":always-link": "False" })

bool_flag( name = "debug", build_setting_default = False)
config_setting( name = "enable_debug", flag_values = { ":debug": "True" })
config_setting( name = "disable_debug", flag_values = { ":debug": "False" })

bool_flag( name = "emit-cmt", build_setting_default = True )
config_setting( name = "enable_emit_cmt", flag_values = { ":emit-cmt": "True" })
config_setting( name = "disable_emit_cmt", flag_values = { ":emit-cmt": "False" })

bool_flag( name = "threads", build_setting_default = True )
config_setting( name = "enable_threads", flag_values = { ":threads": "True" })
config_setting( name = "disable_threads", flag_values = { ":threads": "False" })

bool_flag( name = "verbose", build_setting_default = False)
config_setting( name = "enable_verbose", flag_values = { ":verbose": "True" })
config_setting( name = "disable_verbose", flag_values = { ":verbose": "False" })

## FIXME:
# Enable link-time and aggressive optimizations
bool_flag( name = "optimize",  # PERFORMANCE
           build_setting_default = False)
config_setting( name = "enable_optimization",
                flag_values = { ":optimize": "true" })

selects.config_setting_group(
    name = "macos_disable_debug",
    match_all = ["//bzl/host:macos", ":disable_debug"]
)

################################################################
## ## OCaml config settings

config_setting( name = "cc_link_dynamic", flag_values = { "//:cc_linkage": "dynamic" })
config_setting( name = "cc_link_static", flag_values = { "//:cc_linkage": "static" })

string_flag( name = "ppx_output_format", build_setting_default = "binary", values = ["binary", "text"])
config_setting( name = "enable_ppx_output_format_text", flag_values = { ":ppx_output_format": "text" })
config_setting( name = "enable_ppx_output_format_binary", flag_values = { ":ppx_output_format": "binary" })

###############################
####    LIBSNARK PARAMS    ####

bool_flag( name = "supercop", build_setting_default = True,
           visibility = ["//visibility:public"])

config_setting( name = "with_supercop",
                flag_values = { ":supercop": "True" })
config_setting( name = "without_supercop",
                flag_values = { ":supercop": "False" })

config_setting( name = "enable_gpu", flag_values = { "//:enable_gpu": str(True) },
                visibility = ["//visibility:public"])
config_setting( name = "disable_gpu", flag_values = { "//:enable_gpu": str(False) },
                visibility = ["//visibility:public"])

###############################
####    LIBFQFFT PARAMS    ####

bool_flag( name = "prof_double",
           build_setting_default = False)
config_setting( name = "enable_prof_double",
                flag_values = { ":prof_double": "True" })

#############################
####    SHARED PARAMS    ####

# libff:
config_setting( name = "enable_curve_bn128",      flag_values = { "@//:curve": "bn128" })
config_setting( name = "enable_curve_alt_bn128",  flag_values = { "@//:curve": "alt_bn128" })
config_setting( name = "enable_curve_edwards",    flag_values = { "@//:curve": "edwards" })
config_setting( name = "enable_curve_mnt4",       flag_values = { "@//:curve": "mnt4" })
config_setting( name = "enable_curve_mnt6",       flag_values = { "@//:curve": "mnt6" })

# libff:
config_setting( name = "with_openmp",        flag_values = { "@//:with_openmp": str(True) })
config_setting( name = "without_openmp",       flag_values = { "@//:with_openmp": str(False) })

# ate-pairing:
config_setting( name = "with_libgmp",             flag_values = { "@//:with_libgmp": str(True) })
config_setting( name = "without_libgmp",          flag_values = { "@//:with_libgmp": str(False) })

# ## MULTICORE: libfqfft, libff
# bool_flag( name = "multicore",
#            build_setting_default = False)
# config_setting( name = "enable_multicore",
#                 flag_values = { ":multicore": "true" })

# # # In serialization, output raw binary data (instead of decimal),
# # # which is smaller and faster.
# config_setting( name = "enable_binary_output",
#                 flag_values = { "@//:binary_output": "true" })

################################################################
# Enable debugging of C++ STL (does not imply DEBUG)
config_setting( name = "enable_cxx_debug",  flag_values = { "//:cxx_debug": str(True) })
selects.config_setting_group( name = "macos_cxx_debug",
                              match_all = ["//bzl/host:macos", ":enable_cxx_debug"])
selects.config_setting_group( name = "linux_cxx_debug",
                              match_all = ["//bzl/host:linux", ":enable_cxx_debug"])
