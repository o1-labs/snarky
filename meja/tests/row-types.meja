module type Fixed_rows = {
  let no_arg : [`A];

  let no_args : [`A | `B];

  let arg : [`A(int)];

  let args : [`A(int) | `B(bool)];

  let arg_noarg : [`A(int) | `B];

  let noarg_arg : [`A | `B(bool)];
};

module type Open_rows = {
  let empty : [>];

  let no_arg : [> `A];

  let no_args : [>`A | `B];

  let arg : [>`A(int)];

  let args : [>`A(int) | `B(bool)];

  let arg_noarg : [>`A(int) | `B];

  let noarg_arg : [>`A | `B(bool)];
};

module type Closed_rows = {
  let no_arg : [< `A];

  let no_args : [<`A | `B];

  let arg : [<`A(int)];

  let args : [<`A(int) | `B(bool)];

  let arg_noarg : [<`A(int) | `B];

  let noarg_arg : [<`A | `B(bool)];
};

module type Bounded_rows = {
  let fixed_no_args : [< `A | `B > `A | `B ];

  let fixed_args : [< `A(int) | `B(bool) > `A | `B];

  let no_args : [< `A | `B > `B];

  let args : [< `A(int) | `B(bool) > `B]
};

module Fixed_rows = {
  let no_arg = fun (x : [`A], y : [`A], b) => {
    if (b) { x; } else { y; };
  };

  let no_args = fun (x : [`A | `B], y : [`A | `B], b) => {
    if (b) { x; } else { y; };
  };

  let arg = fun (x : [`A(int)], y : [`A(int)], b) => {
    if (b) { x; } else { y; };
  };

  let args = fun (x : [`A(int) | `B(bool)], y : [`A(int) | `B(bool)], b) => {
    if (b) { x; } else { y; };
  };

  let arg_noarg = fun (x : [`A(int) | `B], y : [`A(int) | `B], b) => {
    if (b) { x; } else { y; };
  };

  let noarg_arg = fun (x : [`A | `B(bool)], y : [`A | `B(bool)], b) => {
    if (b) { x; } else { y; };
  };
};

module Open_rows = {
  let empty = fun (x : [>], y : [>], b) => {
    if (b) { x; } else { y; };
  };

  let no_arg = fun (x : [> `A], y : [> `A], b) => {
    if (b) { x; } else { y; };
  };

  let no_args = fun (x : [>`A | `B], y : [>`A | `B], b) => {
    if (b) { x; } else { y; };
  };

  let arg = fun (x : [>`A(int)], y : [>`A(int)], b) => {
    if (b) { x; } else { y; };
  };

  let args = fun (x : [>`A(int) | `B(bool)],
                  y : [>`A(int) | `B(bool)],
                  b) => {
    if (b) { x; } else { y; };
  };

  let arg_noarg = fun (x : [>`A(int) | `B],
                       y : [>`A(int) | `B],
                       b) => {
    if (b) { x; } else { y; };
  };

  let noarg_arg = fun (x : [>`A | `B(bool)],
                       y : [>`A | `B(bool)],
                       b) => {
    if (b) { x; } else { y; };
  };

  let extend_rows = fun (x : [> `A], y : [> `B], b) => {
    if (b) { x; } else { y; };
  };
};

module Closed_rows = {
  let no_arg = fun (x : [< `A],
                    y : [< `A],
                    b) => {
    if (b) { x; } else { y; };
  };

  let no_args = fun (x : [<`A | `B],
                     y : [<`A | `B],
                     b) => {
    if (b) { x; } else { y; };
  };

  let arg = fun (x : [<`A(int)],
                 y : [<`A(int)],
                 b) => {
    if (b) { x; } else { y; };
  };

  let args = fun (x : [<`A(int) | `B(bool)],
                  y : [<`A(int) | `B(bool)],
                  b) => {
    if (b) { x; } else { y; };
  };

  let arg_noarg = fun (x : [<`A(int) | `B],
                       y : [<`A(int) | `B],
                       b) => {
    if (b) { x; } else { y; };
  };

  let noarg_arg = fun (x : [<`A | `B(bool)],
                       y : [<`A | `B(bool)],
                       b) => {
    if (b) { x; } else { y; };
  };
};

module Bounded_rows = {
  let fixed_no_args = fun (x : [< `A | `B > `A | `B ],
                           y : [< `A | `B > `A | `B ],
                           b) => {
    if (b) { x; } else { y; };
  };

  let fixed_args = fun (x : [< `A(int) | `B(bool) > `A | `B],
                        y : [< `A(int) | `B(bool) > `A | `B],
                        b) => {
    if (b) { x; } else { y; };
  };

  let no_args = fun (x : [< `A | `B > `B],
                     y : [< `A | `B > `B],
                     b) => {
    if (b) { x; } else { y; };
  };

  let args = fun (x : [< `A(int) | `B(bool) > `B],
                  y : [< `A(int) | `B(bool) > `B],
                  b) => {
    if (b) { x; } else { y; };
  };
};

module Mixed_rows = {
  let fixed_open = fun (x : [`A],
                        y : [>],
                        b) => {
    if (b) { x; } else { y; };
  };

  let fixed_closed = fun (x : [`A],
                          y : [< `A | `B],
                          b) => {
    if (b) { x; } else { y; };
  };

  let fixed_bounded = fun (x : [`A],
                           y : [< `A | `B > `A],
                           b) => {
    if (b) { x; } else { y; };
  };

  let open_distinct = fun (x : [> `A],
                           y : [> `B],
                           b) => {
    if (b) { x; } else { y; };
  };

  let open_subset = fun (x : [> `A],
                         y : [> `A | `B],
                         b) => {
    if (b) { x; } else { y; };
  };

  let open_overlap = fun (x : [> `A | `B],
                          y : [> `A | `C],
                          b) => {
    if (b) { x; } else { y; };
  };

  let open_closed = fun (x : [> `A | `B],
                         y : [< `A | `B | `C],
                         b) => {
    if (b) { x; } else { y; };
  };

  let open_bounded = fun (x : [> `A | `B],
                          y : [< `A | `B | `C > `A],
                          b) => {
    if (b) { x; } else { y; };
  };
};

module Copy_test = {
  let f = fun (x1 : [> `A],
               x2 : [> `B],
               x3 : [> `C],
               x4 : [> `D],
               b) => {
    let y1 = if (b) { x1; } else { x2; };
    let y2 = if (b) { x3; } else { x4; };
    let y3 = if (b) { x2; } else { x4; };
    (y1, y2, y3);
  };

  let g = fun (x : [`A | `B | `C | `D | `E]) => {
    f(x, x, x, x, true);
  };

  let h = fun (x : [`A | `B | `C | `D | `F]) => {
    f(x, x, x, x, true);
  };
};

module Expressions = {
  let extend_open = fun (x : [> `A], b) => {
    if (b) { x; } else { `B; };
  };

  let match_open = fun (x : [> `A], b) => {
    if (b) { x; } else { `A; };
  };

  let match_closed = fun (x : [`A], b) => {
    if (b) { x; } else { `A; };
  };

  let expand_bounded = fun (x : [< `A | `B > `A], b) => {
    if (b) { x; } else { `B; };
  };

  let match_bounded = fun (x : [< `A | `B > `A], b) => {
    if (b) { x; } else { `A; };
  };

  let extend_open_arg = fun (x : [> `A(int)], b) => {
    if (b) { x; } else { `B(true); };
  };

  let match_open_arg = fun (x : [> `A(int)], b) => {
    if (b) { x; } else { `A(1); };
  };

  let match_closed_arg = fun (x : [`A('a)], b) => {
    if (b) { x; } else { `A("string"); };
  };

  let expand_bounded_arg = fun (x : [< `A(int) | `B(bool) > `A], b) => {
    if (b) { x; } else { `B(true); };
  };

  let match_bounded_arg = fun (x : [< `A(int) | `B(bool) > `A], b) => {
    if (b) { x; } else { `A(15); };
  };

  let unit_arg = fun (x : [`A(unit)], b) => {
    if (b) { x; } else { `A(); };
  };
};

module Patterns = {
  let extend_open = fun (x : [> `A]) => {
    switch (x) {
      | `B => `B
      | x => x
    };
  };

  let match_open = fun (x : [> `A]) => {
    switch (x) {
      | `A => `A
      | x => x
    };
  };

  let match_closed = fun (x : [`A]) => {
    switch (x) {
      | `A => `A
    };
  };

  let match_bounded = fun (x : [< `A | `B > `A]) => {
    switch (x) {
      | `B => `B
      | x => x
    };
  };

  let extend_open_arg = fun (x : [> `A(int)]) => {
    switch (x) {
      | `B(b : bool) => `B(b)
      | x => x
    };
  };

  let match_open_arg = fun (x : [> `A(int)]) => {
    switch (x) {
      | `A(i) => `A(i)
      | x => x
    };
  };

  let match_variable_arg = fun (x : [`A('a)]) => {
    switch (x) {
      | `A(_) => `A("string")
    };
  };

  let match_closed_arg = fun (x : [`A('a)]) => {
    switch (x) {
      | `A(_ : string) => ()
    };
  };

  let match_bounded_arg = fun (x : [< `A(int) | `B(bool) > `A]) => {
    switch (x) {
      | `A(i) => `B(true)
      | `B(b) => `A(if (b) { 15; } else { 20; })
    };
  };

  let unit_arg = fun (x : [`A(unit)], b) => {
    switch (x) {
      | `A() => ()
    };
  };
};
