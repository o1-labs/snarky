module type P = {
  Prover {
    let x : int;

    let f : bool -> bool;
  };
};

module P = {
  Prover {
    let x = 15;
    let f = fun (b) => { b; };
  };
};

let f = Prover {
  fun (x) => { x; };
};

Prover {
  let g = fun (x) => { f(x); };
};

let h = fun (x) => { Prover { g(x); }; };

let i = fun () => {
  let f = Prover {
    fun (x) => {
      x;
    };
  };
  let i = Prover {
    f(15);
  };
  i;
};

type either('a, 'b) = Fst('a) | Snd('b);

let j = fun (b, x) => {
  let f = Prover {
    fun (x) => {
      if (b) {
        Fst(x);
      } else {
        Snd(15);
      };
    };
  };
  let i = Prover {
    f(x);
  };
  i;
};

let k = fun (f: field) => { j(true, f); };

let l = fun (b: boolean, b': boolean) => { j(b, b'); };
